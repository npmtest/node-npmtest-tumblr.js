{"/home/travis/build/npmtest/node-npmtest-tumblr.js/test.js":"/* istanbul instrument in package npmtest_tumblr_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tumblr.js/lib.npmtest_tumblr.js.js":"/* istanbul instrument in package npmtest_tumblr_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tumblr_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tumblr_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tumblr.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tumblr.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tumblr_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tumblr_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tumblr_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tumblr_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tumblr_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tumblr_js.__dirname + '/lib.npmtest_tumblr_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tumblr.js/node_modules/tumblr.js/lib/tumblr.js":"/*!\n * https://www.npmjs.com/package/tumblr.js\n *\n * <3 always,\n *     Tumblr\n */\n\n/**\n * @namespace tumblr\n */\n\nvar qs = require('query-string');\nvar request = require('request');\n\nvar get = require('lodash/get');\nvar set = require('lodash/set');\nvar keys = require('lodash/keys');\nvar intersection = require('lodash/intersection');\nvar extend = require('lodash/extend');\nvar reduce = require('lodash/reduce');\nvar partial = require('lodash/partial');\nvar zipObject = require('lodash/zipObject');\nvar isString = require('lodash/isString');\nvar isFunction = require('lodash/isFunction');\nvar isArray = require('lodash/isArray');\nvar isPlainObject = require('lodash/isPlainObject');\nvar omit = require('lodash/omit');\n\nvar CLIENT_VERSION = '1.0.0';\nvar API_BASE_URL = 'https://api.tumblr.com/v2';\n\nvar API_METHODS = {\n    GET: {\n        /**\n         * Gets information about a given blog\n         *\n         * @method blogInfo\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogInfo: '/blog/:blogIdentifier/info',\n\n        /**\n         * Gets the avatar URL for a blog\n         *\n         * @method blogAvatar\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {number} [size] - avatar size, in pixels\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogAvatar: '/blog/:blogIdentifier/avatar/:size',\n\n        /**\n         * Gets the likes for a blog\n         *\n         * @method blogLikes\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogLikes: '/blog/:blogIdentifier/likes',\n\n        /**\n         * Gets the followers for a blog\n         *\n         * @method blogLikes\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogFollowers: '/blog/:blogIdentifier/followers',\n\n        /**\n         * Gets a list of posts for a blog\n         *\n         * @method blogPosts\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {string} [type] - filters returned posts to the specified type\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @memberof TumblrClient\n         */\n        blogPosts: '/blog/:blogIdentifier/posts/:type',\n\n        /**\n         * Gets the queue for a blog\n         *\n         * @method blogQueue\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogQueue: '/blog/:blogIdentifier/posts/queue',\n\n        /**\n         * Gets the drafts for a blog\n         *\n         * @method blogDrafts\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} [params] - optional data sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogDrafts: '/blog/:blogIdentifier/posts/draft',\n\n        /**\n         * Gets the submissions for a blog\n         *\n         * @method blogSubmissions\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} [params] - optional parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        blogSubmissions: '/blog/:blogIdentifier/posts/submission',\n\n        /**\n         * Gets information about the authenticating user and their blogs\n         *\n         * @method userInfo\n         *\n         * @param  {Object} [params] - optional parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        userInfo: '/user/info',\n\n        /**\n         * Gets the dashboard posts for the authenticating user\n         *\n         * @method userDashboard\n         *\n         * @param  {Object} [params] - optional parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        userDashboard: '/user/dashboard',\n\n        /**\n         * Gets the blogs the authenticating user follows\n         *\n         * @method userFollowing\n         *\n         * @param  {Object} [params] - optional parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        userFollowing: '/user/following',\n\n        /**\n         * Gets the likes for the authenticating user\n         *\n         * @method userLikes\n         *\n         * @param  {Object} [params] - optional parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        userLikes: '/user/likes',\n\n        /**\n         * Gets posts tagged with the specified tag\n         *\n         * @method taggedPosts\n         *\n         * @param  {string} [tag] - tag to search for\n         * @param  {Object} [params] - optional parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        taggedPosts: ['/tagged', ['tag']],\n    },\n\n    POST: {\n        /**\n         * Creates a post on the given blog.\n         * See the {@link https://www.tumblr.com/docs/api/v2#posting|API docs} for more information\n         * about the parameters accepted.\n         *\n         * @method createPost\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} params - parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        createPost: '/blog/:blogIdentifier/post',\n\n        /**\n         * Edits a given post\n         *\n         * @method editPost\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} params - parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        editPost: '/blog/:blogIdentifier/post/edit',\n\n        /**\n         * Edits a given post\n         *\n         * @method reblogPost\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} params - parameters sent with the request\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        reblogPost: '/blog/:blogIdentifier/post/reblog',\n\n        /**\n         * Edits a given post\n         *\n         * @method deletePost\n         *\n         * @param  {string} blogIdentifier - blog name or URL\n         * @param  {Object} params - parameters sent with the request\n         * @param  {Object} params.id - ID of the post to delete\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        deletePost: ['/blog/:blogIdentifier/post/delete', ['id']],\n\n        /**\n         * Follows a blog as the authenticating user\n         *\n         * @method followBlog\n         *\n         * @param  {Object} params - parameters sent with the request\n         * @param  {Object} params.url - URL of the blog to follow\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        followBlog: ['/user/follow', ['url']],\n\n        /**\n         * Unfollows a blog as the authenticating user\n         *\n         * @method unfollowBlog\n         *\n         * @param  {Object} params - parameters sent with the request\n         * @param  {Object} params.url - URL of the blog to unfollow\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        unfollowBlog: ['/user/unfollow', ['url']],\n\n        /**\n         * Likes a post as the authenticating user\n         *\n         * @method likePost\n         *\n         * @param  {Object} params - parameters sent with the request\n         * @param  {Object} params.id - ID of the post to like\n         * @param  {Object} params.reblog_key - Reblog key for the post ID\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        likePost: ['/user/like', ['id', 'reblog_key']],\n\n        /**\n         * Unlikes a post as the authenticating user\n         *\n         * @method unlikePost\n         *\n         * @param  {Object} params - parameters sent with the request\n         * @param  {Object} params.id - ID of the post to unlike\n         * @param  {Object} params.reblog_key - Reblog key for the post ID\n         * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n         *\n         * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n         *\n         * @memberof TumblrClient\n         */\n        unlikePost: ['/user/unlike', ['id', 'reblog_key']],\n    },\n};\n\n/**\n * Turns a blog name to a full blog URL\n *\n * @param  {string} blogUrl - blog name or URL\n *\n * @return {string} full blog URL\n *\n * @private\n */\nfunction forceFullBlogUrl(blogUrl) {\n    if (blogUrl.indexOf('.') < 0) {\n        blogUrl += '.tumblr.com';\n    }\n    return blogUrl;\n}\n\n/**\n * Creates a named function with the desired signature\n *\n * @param  {string} name - function name\n * @param  {Array} [args] - array of argument names\n * @param  {Function} fn - function that contains the logic that should run\n *\n * @return {Function} a named function that takes the desired arguments\n *\n * @private\n */\nfunction createFunction(name, args, fn) {\n    if (isFunction(args)) {\n        fn = args;\n        args = [];\n    }\n\n    return new Function('body',\n        'return function ' + name + '(' + args.join(', ') + ') { return body.apply(this, arguments); };'\n    )(fn);\n}\n\n/**\n * Take a callback-based function and returns a Promise instead\n *\n * @param  {Function} requestMethod - callback-based method to promisify\n *\n * @return {Function} function that returns a Promise that resolves with the response body or\n *         rejects with the error message\n *\n * @private\n */\nfunction promisifyRequest(requestMethod) {\n    return function(apiPath, params, callback) {\n        var promise = new Promise(function(resolve, reject) {\n            requestMethod.call(this, apiPath, params, function(err, resp) {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(resp);\n                }\n            });\n        }.bind(this));\n\n        if (callback) {\n            promise\n                .then(function(body) {\n                    callback(null, body);\n                })\n                .catch(function(err) {\n                    callback(err, null);\n                });\n        }\n\n        return promise;\n    };\n}\n\n/**\n * Wraps a function for use as a request callback\n *\n * @param  {TumblrClient~callback} callback - function to wrap\n *\n * @return {TumblrClient~callback} request callback\n *\n * @private\n */\nfunction requestCallback(callback) {\n    if (!callback) {\n        return undefined;\n    }\n\n    return function(err, response, body) {\n        if (err) {\n            return callback(err, null, response);\n        }\n\n        if (response.statusCode >= 400) {\n            var errString = body.meta ? body.meta.msg : body.error;\n            return callback(new Error('API error: ' + response.statusCode + ' ' + errString), null, response);\n        }\n\n        if (body && body.response) {\n            return callback(null, body.response, response);\n        } else {\n            return callback(new Error('API error (malformed API response): ' + body), null, response);\n        }\n    };\n}\n\n/**\n * Make a get request\n *\n * @param  {Function} requestGet - function that performs a get request\n * @param  {Object} credentials - OAuth credentials\n * @param  {string} baseUrl - base URL for the request\n * @param  {string} apiPath - URL path for the request\n * @param  {Object} requestOptions - additional request options\n * @param  {Object} params - query parameters\n * @param  {TumblrClient~callback} callback - request callback\n *\n * @return {Request} Request object\n *\n * @private\n */\nfunction getRequest(requestGet, credentials, baseUrl, apiPath, requestOptions, params, callback) {\n    params = params || {};\n\n    if (credentials.consumer_key) {\n        params.api_key = credentials.consumer_key;\n    }\n\n    return requestGet(extend({\n        url: baseUrl + apiPath + '?' + qs.stringify(params),\n        oauth: credentials,\n        json: true,\n    }, requestOptions), requestCallback(callback));\n}\n\n/**\n * Create a function to make POST requests to the Tumblr API\n *\n * @param  {Function} requestPost - function that performs a get request\n * @param  {Object} credentials - OAuth credentials\n * @param  {string} baseUrl - base URL for the request\n * @param  {string} apiPath - URL path for the request\n * @param  {Object} requestOptions - additional request options\n * @param  {Object} params - form data\n * @param  {TumblrClient~callback} callback - request callback\n *\n * @return {Request} Request object\n *\n * @private\n */\nfunction postRequest(requestPost, credentials, baseUrl, apiPath, requestOptions, params, callback) {\n    params = params || {};\n\n    // Sign without multipart data\n    var currentRequest = requestPost(extend({\n        url: baseUrl + apiPath,\n        oauth: credentials,\n    }, requestOptions), function(err, response, body) {\n        try {\n            body = JSON.parse(body);\n        } catch (e) {\n            body = {\n                error: 'Malformed Response: ' + body,\n            };\n        }\n        requestCallback(callback)(err, response, body);\n    });\n\n    // Sign it with the non-data parameters\n    var dataKeys = ['data'];\n    currentRequest.form(omit(params, dataKeys));\n    currentRequest.oauth(credentials);\n\n    // Clear the side effects from form(param)\n    delete currentRequest.headers['content-type'];\n    delete currentRequest.body;\n\n    // And then add the full body\n    var form = currentRequest.form();\n    for (var key in params) {\n        form.append(key, params[key]);\n    }\n\n    // Add the form header back\n    extend(currentRequest.headers, form.getHeaders());\n\n    return currentRequest;\n}\n\n/**\n * Adds a request method to the client\n *\n * @param  {Object} client - add the method to this object\n * @param  {string} methodName - the name of the method\n * @param  {string} apiPath - the API route, which uses any colon-prefixed segments as arguments\n * @param  {Array} paramNames - ordered list of required request parameters used as arguments\n * @param  {String|Function} requestType - the request type or a function that makes the request\n *\n * @private\n */\nfunction addMethod(client, methodName, apiPath, paramNames, requestType) {\n    var apiPathSplit = apiPath.split('/');\n    var apiPathParamsCount = apiPath.split(/\\/:[^\\/]+/).length - 1;\n\n    var buildApiPath = function(args) {\n        var pathParamIndex = 0;\n        return reduce(apiPathSplit, function(apiPath, apiPathChunk, i) {\n            // Parse arguments in the path\n            if (apiPathChunk === ':blogIdentifier') {\n                // Blog URLs are special\n                apiPathChunk = forceFullBlogUrl(args[pathParamIndex++]);\n            } else if (apiPathChunk[0] === ':') {\n                apiPathChunk = args[pathParamIndex++];\n            }\n\n            if (apiPathChunk) {\n                return apiPath + '/' + apiPathChunk;\n            } else {\n                return apiPath;\n            }\n        }, '');\n    };\n\n    var namedParams = (apiPath.match(/\\/:[^\\/]+/g) || []).map(function(param) {\n        return param.substr(2);\n    }).concat(paramNames, 'params', 'callback');\n\n    var methodBody = function() {\n        var argsLength = arguments.length;\n        var args = new Array(argsLength);\n        for (var i = 0; i < argsLength; i++) {\n            args[i] = arguments[i];\n        }\n\n        var requiredParamsStart = apiPathParamsCount;\n        var requiredParamsEnd = requiredParamsStart + paramNames.length;\n        var requiredParamArgs = args.slice(requiredParamsStart, requiredParamsEnd);\n\n        // Callback is at the end\n        var callback = isFunction(args[args.length - 1]) ? args.pop() : null;\n\n        // Required Parmas\n        var params = zipObject(paramNames, requiredParamArgs);\n        extend(params, isPlainObject(args[args.length - 1]) ? args.pop() : {});\n\n        // Path arguments are determined after required parameters\n        var apiPathArgs = args.slice(0, apiPathParamsCount);\n\n        var request = requestType;\n        if (isString(requestType)) {\n            request = requestType.toUpperCase() === 'POST' ? client.postRequest : client.getRequest;\n        } else if (!isFunction(requestType)) {\n            request = client.getRequest;\n        }\n\n        return request.call(client, buildApiPath(apiPathArgs), params, callback);\n    };\n\n    set(client, methodName, createFunction(methodName, namedParams, methodBody));\n}\n\n/**\n * Adds methods to the client\n *\n * @param  {TumblrClient} client - an instance of the `tumblr.js` API client\n * @param  {Object} methods - mapping of method names to endpoints. Endpoints can be a string or an\n *         array of format `[apiPathString, requireParamsArray]`\n * @param  {String|Function} requestType - the request type or a function that makes the request\n *\n * @private\n */\nfunction addMethods(client, methods, requestType) {\n    var apiPath, paramNames;\n    for (var methodName in methods) {\n        apiPath = methods[methodName];\n        if (isString(apiPath)) {\n            paramNames = [];\n        } else if (isPlainObject(apiPath)) {\n            paramNames = apiPath.paramNames || [];\n            apiPath = apiPath.path;\n        } else {\n            paramNames = apiPath[1] || [];\n            apiPath = apiPath[0];\n        }\n        addMethod(client, methodName, apiPath, paramNames, requestType || 'GET');\n    }\n}\n\n/**\n * Wraps createPost to specify `type` and validate the parameters\n *\n * @param  {string} type - post type\n * @param  {Function} [validate] - returns `true` if the parameters validate\n *\n * @return {Function} wrapped function\n *\n * @private\n */\nfunction wrapCreatePost(type, validate) {\n    return function(blogIdentifier, params, callback) {\n        params = extend({type: type}, params);\n\n        if (isArray(validate)) {\n            validate = partial(function(params, requireKeys) {\n                if (requireKeys.length) {\n                    var keyIntersection = intersection(keys(params), requireKeys);\n                    if (requireKeys.length === 1 && !keyIntersection.length) {\n                        throw new Error('Missing required field: ' + requireKeys[0]);\n                    } else if (!keyIntersection.length) {\n                        throw new Error('Missing one of: ' + requireKeys.join(', '));\n                    } else if (keyIntersection.length > 1) {\n                        throw new Error('Can only use one of: ' + requireKeys.join(', '));\n                    }\n                }\n                return true;\n            }, params, validate);\n        }\n\n        if (isFunction(validate)) {\n            if (!validate(params)) {\n                throw new Error('Error validating parameters');\n            }\n        }\n\n        if (arguments.length > 2) {\n            return this.createPost(blogIdentifier, params, callback);\n        } else {\n            return this.createPost(blogIdentifier, params);\n        }\n    };\n}\n\n/**\n * Creates a Tumblr API client using the given options\n *\n * @param  {Object} [options] - client options\n * @param  {Object} [options.credentials] - OAuth credentials\n * @param  {string} [options.baseUrl] - API base URL\n * @param  {Object} [options.request] - library to use for making requests\n *\n * @constructor\n */\nfunction TumblrClient(options) {\n    // Support for `TumblrClient(credentials, baseUrl, requestLibrary)`\n    if (arguments.length > 1) {\n        options = {\n            credentials: arguments[0],\n            baseUrl: arguments[1],\n            request: arguments[2],\n            returnPromises: false,\n        };\n    }\n\n    options = options || {};\n\n    this.version = CLIENT_VERSION;\n    this.credentials = get(options, 'credentials', omit(options, 'baseUrl', 'request'));\n    this.baseUrl = get(options, 'baseUrl', API_BASE_URL);\n    this.request = get(options, 'request', request);\n    this.requestOptions = {\n        followRedirect: false,\n        headers: {\n            'User-Agent': 'tumblr.js/' + CLIENT_VERSION,\n        },\n    };\n\n    this.addGetMethods(API_METHODS.GET);\n    this.addPostMethods(API_METHODS.POST);\n\n    /**\n     * Creates a text post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#ptext-posts|API docs}\n     *\n     * @method createTextPost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} [params.title] - post title text\n     * @param  {string} params.body - post body text\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createTextPost = wrapCreatePost('text', ['body']);\n\n    /**\n     * Creates a photo post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#pphoto-posts|API docs}\n     *\n     * @method createPhotoPost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} params.source - image source URL\n     * @param  {Stream|Array} params.data - an image or array of images\n     * @param  {string} params.data64 - base64-encoded image data\n     * @param  {string} [params.caption] - post caption text\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createPhotoPost = wrapCreatePost('photo', ['data', 'data64', 'source']);\n\n    /**\n     * Creates a quote post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#pquote-posts|API docs}\n     *\n     * @method createQuotePost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} params.quote - quote text\n     * @param  {string} [params.source] - quote source\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createQuotePost = wrapCreatePost('quote', ['quote']);\n\n    /**\n     * Creates a link post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#plink-posts|API docs}\n     *\n     * @method createLinkPost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} [params.title] - post title text\n     * @param  {string} params.url - the link URL\n     * @param  {string} [params.thumbnail] - the URL of an image to use as the thumbnail\n     * @param  {string} [params.excerpt] - an excerpt from the page the link points to\n     * @param  {string} [params.author] - the name of the author of the page the link points to\n     * @param  {string} [params.description] - post caption text\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createLinkPost = wrapCreatePost('link', ['url']);\n\n    /**\n     * Creates a chat post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#pchat-posts|API docs}\n     *\n     * @method createLinkPost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} [params.title] - post title text\n     * @param  {string} params.conversation - chat text\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createChatPost = wrapCreatePost('chat', ['conversation']);\n\n    /**\n     * Creates a photo post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#paudio-posts|API docs}\n     *\n     * @method createAudioPost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} params.external_url - image source URL\n     * @param  {Stream} params.data - an audio file\n     * @param  {string} [params.caption] - post caption text\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createAudioPost = wrapCreatePost('audio', ['data', 'data64', 'external_url']);\n\n    /**\n     * Creates a photo post on the given blog\n     *\n     * @see {@link https://www.tumblr.com/docs/api/v2#pvideo-posts|API docs}\n     *\n     * @method createVideoPost\n     *\n     * @param  {string} blogIdentifier - blog name or URL\n     * @param  {Object} params - parameters sent with the request\n     * @param  {string} params.embed - embed code or a video URL\n     * @param  {Stream} params.data - a video file\n     * @param  {string} [params.caption] - post caption text\n     * @param  {TumblrClient~callback} [callback] - invoked when the request completes\n     *\n     * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n     *\n     * @memberof TumblrClient\n     */\n    this.createVideoPost = wrapCreatePost('video', ['data', 'data64', 'embed']);\n\n    // Enable Promise mode\n    if (get(options, 'returnPromises', false)) {\n        this.returnPromises();\n    }\n}\n\n/**\n * Performs a GET request\n *\n * @param  {string} apiPath - URL path for the request\n * @param  {Object} params - query parameters\n * @param  {TumblrClient~callback} [callback] - request callback\n *\n * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n */\nTumblrClient.prototype.getRequest = function(apiPath, params, callback) {\n    if (isFunction(params)) {\n        callback = params;\n        params = {};\n    }\n    return getRequest(this.request.get, this.credentials, this.baseUrl, apiPath, this.requestOptions, params, callback);\n};\n\n/**\n * Performs a POST request\n *\n * @param  {string} apiPath - URL path for the request\n * @param  {Object} params - form parameters\n * @param  {TumblrClient~callback} [callback] - request callback\n *\n * @return {Request|Promise} Request object, or Promise if {@link returnPromises} was used\n */\nTumblrClient.prototype.postRequest = function(apiPath, params, callback) {\n    if (isFunction(params)) {\n        callback = params;\n        params = {};\n    }\n    return postRequest(this.request.post, this.credentials, this.baseUrl, apiPath, this.requestOptions, params, callback);\n};\n\n/**\n * Sets the client to return Promises instead of Request objects by patching the `getRequest` and\n * `postRequest` methods on the client\n */\nTumblrClient.prototype.returnPromises = function() {\n    this.getRequest = promisifyRequest(this.getRequest);\n    this.postRequest = promisifyRequest(this.postRequest);\n};\n\n/**\n * Adds GET methods to the client\n *\n * @param  {Object} methods - mapping of method names to endpoints\n */\nTumblrClient.prototype.addGetMethods = function(methods) {\n    addMethods(this, methods, 'GET');\n};\n\n/**\n * Adds POST methods to the client\n *\n * @param  {Object} methods - mapping of method names to endpoints\n */\nTumblrClient.prototype.addPostMethods = function(methods) {\n    addMethods(this, methods, 'POST');\n};\n\n/**\n * Handles the response from a client reuest\n *\n * @callback TumblrClient~callback\n * @param {?Error} err - error message\n * @param {?Object} resp - response body\n * @param {?string} [response] - raw response\n */\n\n/*\n * Please, enjoy our luxurious exports.\n */\nmodule.exports = {\n    /**\n     * Passthrough for the {@link TumblrClient} class\n     *\n     * @memberof tumblr\n     * @see {@link TumblrClient}\n     */\n    Client: TumblrClient,\n\n    /**\n     * Creates a Tumblr Client\n     *\n     * @param  {Object} [options] - client options\n     * @param  {Object} [options.credentials] - OAuth credentials\n     * @param  {string} [options.baseUrl] - API base URL\n     * @param  {Object} [options.request] - library to use for making requests\n     *\n     * @return {TumblrClient} {@link TumblrClient} instance\n     *\n     * @memberof tumblr\n     * @see {@link TumblrClient}\n     */\n    createClient: function(options) {\n        // Support for `TumblrClient(credentials, baseUrl, requestLibrary)`\n        if (arguments.length > 1) {\n            options = {\n                credentials: arguments[0],\n                baseUrl: arguments[1],\n                request: arguments[2],\n                returnPromises: false,\n            };\n        }\n\n        // Create the Tumblr Client\n        var client = new TumblrClient(options);\n\n        return client;\n    },\n};\n"}